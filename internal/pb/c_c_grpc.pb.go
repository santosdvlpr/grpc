// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: proto/c_c.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CategoriaServiceClient is the client API for CategoriaService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CategoriaServiceClient interface {
	CreateCategoria(ctx context.Context, in *CreateCategoriaRequest, opts ...grpc.CallOption) (*Categoria, error)
	CreateCategoriaStream(ctx context.Context, opts ...grpc.CallOption) (CategoriaService_CreateCategoriaStreamClient, error)
	CreateCategoriaStreamBidirectional(ctx context.Context, opts ...grpc.CallOption) (CategoriaService_CreateCategoriaStreamBidirectionalClient, error)
	ListaCategorias(ctx context.Context, in *Blank, opts ...grpc.CallOption) (*CategoriaList, error)
	GetCategoria(ctx context.Context, in *CategoriaGetRequest, opts ...grpc.CallOption) (*Categoria, error)
}

type categoriaServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCategoriaServiceClient(cc grpc.ClientConnInterface) CategoriaServiceClient {
	return &categoriaServiceClient{cc}
}

func (c *categoriaServiceClient) CreateCategoria(ctx context.Context, in *CreateCategoriaRequest, opts ...grpc.CallOption) (*Categoria, error) {
	out := new(Categoria)
	err := c.cc.Invoke(ctx, "/pb.CategoriaService/CreateCategoria", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *categoriaServiceClient) CreateCategoriaStream(ctx context.Context, opts ...grpc.CallOption) (CategoriaService_CreateCategoriaStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &CategoriaService_ServiceDesc.Streams[0], "/pb.CategoriaService/CreateCategoriaStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &categoriaServiceCreateCategoriaStreamClient{stream}
	return x, nil
}

type CategoriaService_CreateCategoriaStreamClient interface {
	Send(*CreateCategoriaRequest) error
	CloseAndRecv() (*CategoriaList, error)
	grpc.ClientStream
}

type categoriaServiceCreateCategoriaStreamClient struct {
	grpc.ClientStream
}

func (x *categoriaServiceCreateCategoriaStreamClient) Send(m *CreateCategoriaRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *categoriaServiceCreateCategoriaStreamClient) CloseAndRecv() (*CategoriaList, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(CategoriaList)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *categoriaServiceClient) CreateCategoriaStreamBidirectional(ctx context.Context, opts ...grpc.CallOption) (CategoriaService_CreateCategoriaStreamBidirectionalClient, error) {
	stream, err := c.cc.NewStream(ctx, &CategoriaService_ServiceDesc.Streams[1], "/pb.CategoriaService/CreateCategoriaStreamBidirectional", opts...)
	if err != nil {
		return nil, err
	}
	x := &categoriaServiceCreateCategoriaStreamBidirectionalClient{stream}
	return x, nil
}

type CategoriaService_CreateCategoriaStreamBidirectionalClient interface {
	Send(*CreateCategoriaRequest) error
	CloseAndRecv() (*Categoria, error)
	grpc.ClientStream
}

type categoriaServiceCreateCategoriaStreamBidirectionalClient struct {
	grpc.ClientStream
}

func (x *categoriaServiceCreateCategoriaStreamBidirectionalClient) Send(m *CreateCategoriaRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *categoriaServiceCreateCategoriaStreamBidirectionalClient) CloseAndRecv() (*Categoria, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Categoria)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *categoriaServiceClient) ListaCategorias(ctx context.Context, in *Blank, opts ...grpc.CallOption) (*CategoriaList, error) {
	out := new(CategoriaList)
	err := c.cc.Invoke(ctx, "/pb.CategoriaService/ListaCategorias", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *categoriaServiceClient) GetCategoria(ctx context.Context, in *CategoriaGetRequest, opts ...grpc.CallOption) (*Categoria, error) {
	out := new(Categoria)
	err := c.cc.Invoke(ctx, "/pb.CategoriaService/GetCategoria", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CategoriaServiceServer is the server API for CategoriaService service.
// All implementations must embed UnimplementedCategoriaServiceServer
// for forward compatibility
type CategoriaServiceServer interface {
	CreateCategoria(context.Context, *CreateCategoriaRequest) (*Categoria, error)
	CreateCategoriaStream(CategoriaService_CreateCategoriaStreamServer) error
	CreateCategoriaStreamBidirectional(CategoriaService_CreateCategoriaStreamBidirectionalServer) error
	ListaCategorias(context.Context, *Blank) (*CategoriaList, error)
	GetCategoria(context.Context, *CategoriaGetRequest) (*Categoria, error)
	mustEmbedUnimplementedCategoriaServiceServer()
}

// UnimplementedCategoriaServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCategoriaServiceServer struct {
}

func (UnimplementedCategoriaServiceServer) CreateCategoria(context.Context, *CreateCategoriaRequest) (*Categoria, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCategoria not implemented")
}
func (UnimplementedCategoriaServiceServer) CreateCategoriaStream(CategoriaService_CreateCategoriaStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method CreateCategoriaStream not implemented")
}
func (UnimplementedCategoriaServiceServer) CreateCategoriaStreamBidirectional(CategoriaService_CreateCategoriaStreamBidirectionalServer) error {
	return status.Errorf(codes.Unimplemented, "method CreateCategoriaStreamBidirectional not implemented")
}
func (UnimplementedCategoriaServiceServer) ListaCategorias(context.Context, *Blank) (*CategoriaList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListaCategorias not implemented")
}
func (UnimplementedCategoriaServiceServer) GetCategoria(context.Context, *CategoriaGetRequest) (*Categoria, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCategoria not implemented")
}
func (UnimplementedCategoriaServiceServer) mustEmbedUnimplementedCategoriaServiceServer() {}

// UnsafeCategoriaServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CategoriaServiceServer will
// result in compilation errors.
type UnsafeCategoriaServiceServer interface {
	mustEmbedUnimplementedCategoriaServiceServer()
}

func RegisterCategoriaServiceServer(s grpc.ServiceRegistrar, srv CategoriaServiceServer) {
	s.RegisterService(&CategoriaService_ServiceDesc, srv)
}

func _CategoriaService_CreateCategoria_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCategoriaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CategoriaServiceServer).CreateCategoria(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.CategoriaService/CreateCategoria",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CategoriaServiceServer).CreateCategoria(ctx, req.(*CreateCategoriaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CategoriaService_CreateCategoriaStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CategoriaServiceServer).CreateCategoriaStream(&categoriaServiceCreateCategoriaStreamServer{stream})
}

type CategoriaService_CreateCategoriaStreamServer interface {
	SendAndClose(*CategoriaList) error
	Recv() (*CreateCategoriaRequest, error)
	grpc.ServerStream
}

type categoriaServiceCreateCategoriaStreamServer struct {
	grpc.ServerStream
}

func (x *categoriaServiceCreateCategoriaStreamServer) SendAndClose(m *CategoriaList) error {
	return x.ServerStream.SendMsg(m)
}

func (x *categoriaServiceCreateCategoriaStreamServer) Recv() (*CreateCategoriaRequest, error) {
	m := new(CreateCategoriaRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _CategoriaService_CreateCategoriaStreamBidirectional_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CategoriaServiceServer).CreateCategoriaStreamBidirectional(&categoriaServiceCreateCategoriaStreamBidirectionalServer{stream})
}

type CategoriaService_CreateCategoriaStreamBidirectionalServer interface {
	SendAndClose(*Categoria) error
	Recv() (*CreateCategoriaRequest, error)
	grpc.ServerStream
}

type categoriaServiceCreateCategoriaStreamBidirectionalServer struct {
	grpc.ServerStream
}

func (x *categoriaServiceCreateCategoriaStreamBidirectionalServer) SendAndClose(m *Categoria) error {
	return x.ServerStream.SendMsg(m)
}

func (x *categoriaServiceCreateCategoriaStreamBidirectionalServer) Recv() (*CreateCategoriaRequest, error) {
	m := new(CreateCategoriaRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _CategoriaService_ListaCategorias_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Blank)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CategoriaServiceServer).ListaCategorias(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.CategoriaService/ListaCategorias",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CategoriaServiceServer).ListaCategorias(ctx, req.(*Blank))
	}
	return interceptor(ctx, in, info, handler)
}

func _CategoriaService_GetCategoria_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CategoriaGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CategoriaServiceServer).GetCategoria(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.CategoriaService/GetCategoria",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CategoriaServiceServer).GetCategoria(ctx, req.(*CategoriaGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CategoriaService_ServiceDesc is the grpc.ServiceDesc for CategoriaService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CategoriaService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.CategoriaService",
	HandlerType: (*CategoriaServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateCategoria",
			Handler:    _CategoriaService_CreateCategoria_Handler,
		},
		{
			MethodName: "ListaCategorias",
			Handler:    _CategoriaService_ListaCategorias_Handler,
		},
		{
			MethodName: "GetCategoria",
			Handler:    _CategoriaService_GetCategoria_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "CreateCategoriaStream",
			Handler:       _CategoriaService_CreateCategoriaStream_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "CreateCategoriaStreamBidirectional",
			Handler:       _CategoriaService_CreateCategoriaStreamBidirectional_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "proto/c_c.proto",
}
